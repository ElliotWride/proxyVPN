# Installer Script: VpnInstaller.ps1

# Define paths
$openvpnDir = "C:\Program Files\OpenVPN"
$openvpnDownloadUrl = "https://swupdate.openvpn.org/community/releases/openvpn-install-2.5.3-I601-amd64.msi"
$openvpnInstallerPath = Join-Path -Path $env:TEMP -ChildPath "openvpn-install.msi"
$easyRsaVersion = "3.1.7"
$easyRsaZipUrl = "https://github.com/OpenVPN/easy-rsa/releases/download/v$easyRsaVersion/EasyRSA-$easyRsaVersion.tgz"
$easyRsaZipPath = Join-Path -Path $openvpnDir -ChildPath "EasyRSA-$easyRsaVersion.tgz"
$easyRsaExtractPath = Join-Path -Path $openvpnDir -ChildPath "EasyRSA-$easyRsaVersion"

# Function to download a file
function Download-File {
    param (
        [string]$url,
        [string]$output
    )
    $webClient = New-Object System.Net.WebClient
    $webClient.DownloadFile($url, $output)
}

# Function to extract a tgz file
function Extract-Tgz {
    param (
        [string]$tgzPath,
        [string]$extractPath
    )
    Add-Type -AssemblyName System.IO.Compression.FileSystem
    $gzipStream = [System.IO.Compression.GzipStream]::new([System.IO.File]::OpenRead($tgzPath), [System.IO.Compression.CompressionMode]::Decompress)
    $tarPath = [System.IO.Path]::ChangeExtension($tgzPath, ".tar")
    $tarStream = [System.IO.File]::Create($tarPath)
    $buffer = New-Object byte[] 4096
    while (($count = $gzipStream.Read($buffer, 0, $buffer.Length)) -gt 0) {
        $tarStream.Write($buffer, 0, $count)
    }
    $tarStream.Close()
    $gzipStream.Close()

    tar -xf $tarPath -C $extractPath
    Remove-Item $tarPath
}

# Function to check if a program is installed
function Test-ProgramInstalled {
    param (
        [string]$programName
    )
    $installed = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -eq $programName }
    return $installed -ne $null
}

# Function to generate OpenVPN files using EasyRSA
function Generate-OpenVPNFiles {
    Write-Output "Generating required OpenVPN files using EasyRSA..."

    # Change directory to EasyRSA and execute EasyRSA-Start.bat
    $easyRsaBat = Join-Path -Path $easyRsaExtractPath -ChildPath "EasyRSA-Start.bat"
    & cmd.exe /c "cd `"$easyRsaExtractPath`" && call `"$easyRsaBat`""

    # Verify if files are generated and move them to the OpenVPN directory
    $generatedFiles = @("ca.crt", "server.crt", "server.key", "dh.pem", "ta.key")
    foreach ($file in $generatedFiles) {
        $sourceFile = Join-Path -Path $easyRsaExtractPath -ChildPath "pki\$file"
        $destinationFile = Join-Path -Path $openvpnDir -ChildPath $file
        
        if (!(Test-Path -Path $sourceFile -PathType Leaf)) {
            Write-Error "Failed to find generated file $file in $sourceFile"
            return $false
        }

        Move-Item -Path $sourceFile -Destination $destinationFile -Force -ErrorAction Stop
    }

    Write-Output "Files generated and moved to $openvpnDir directory."
    return $true
}

# Main script execution
try {
    # Ensure OpenVPN directory exists
    if (!(Test-Path -Path $openvpnDir -PathType Container)) {
        New-Item -Path $openvpnDir -ItemType Directory -Force
    }

    # Check if OpenVPN is installed, if not, download and install it
    if (-not (Test-ProgramInstalled -programName "OpenVPN")) {
        Write-Output "Downloading and installing OpenVPN..."
        Download-File -url $openvpnDownloadUrl -output $openvpnInstallerPath
        Start-Process msiexec.exe -ArgumentList "/i `"$openvpnInstallerPath`" /quiet /norestart" -Wait
        Write-Output "OpenVPN installed successfully."
    } else {
        Write-Output "OpenVPN is already installed. Skipping download and installation."
    }

    # Download EasyRSA
    Write-Output "Downloading EasyRSA..."
    Download-File -url $easyRsaZipUrl -output $easyRsaZipPath

    # Extract EasyRSA
    Write-Output "Extracting EasyRSA..."
    if (!(Test-Path -Path $easyRsaExtractPath -PathType Container)) {
        New-Item -Path $easyRsaExtractPath -ItemType Directory -Force
    }
    Extract-Tgz -tgzPath $easyRsaZipPath -extractPath $openvpnDir

    # Generate OpenVPN files
    $generateSuccess = Generate-OpenVPNFiles

    if ($generateSuccess) {
        Write-Output "OpenVPN setup completed successfully."
    } else {
        Write-Error "Failed to generate or move one or more required files. Please check and re-run the script."
    }
} catch {
    Write-Error $_.Exception.Message
    exit 1
}
